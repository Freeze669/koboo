/**
 * D√©monstration des Notifications Discord - Nouveau Serveur
 * Mayu & Jack Studio
 * 
 * Ce fichier montre comment utiliser le syst√®me de notifications Discord
 * pour annoncer le nouveau serveur : https://discord.gg/5ps8dkfnBk
 */

// Configuration du webhook Discord (√† remplacer par votre URL)
const DEMO_WEBHOOK_URL = 'VOTRE_WEBHOOK_DISCORD_ICI';

// Classe de d√©monstration pour les notifications Discord
class DiscordNotificationDemo {
    constructor() {
        this.notificationsSystem = null;
        this.isInitialized = false;
        this.demoData = {
            serverName: 'Mayu & Jack Studio - Nouveau Serveur',
            inviteLink: 'https://discord.gg/5ps8dkfnBk',
            description: 'Nouveau serveur Discord officiel avec support technique et communaut√© active',
            features: [
                'Support technique 24/7',
                'Communaut√© active et bienveillante',
                'Actualit√©s en temps r√©el',
                'Tutoriels et guides',
                'D√©veloppement collaboratif'
            ],
            benefits: [
                'Acc√®s prioritaire aux nouvelles fonctionnalit√©s',
                'Support direct des d√©veloppeurs',
                'Partage d\'exp√©riences',
                'R√©seautage professionnel'
            ]
        };
        
        this.init();
    }
    
    /**
     * Initialisation du syst√®me
     */
    init() {
        console.log('üöÄ Initialisation de la d√©mo Discord...');
        
        // V√©rifier si le webhook est configur√©
        if (this.checkWebhookConfiguration()) {
            this.initializeNotifications();
        } else {
            this.showConfigurationInstructions();
        }
    }
    
    /**
     * V√©rifier la configuration du webhook
     */
    checkWebhookConfiguration() {
        if (typeof window !== 'undefined' && window.isWebhookConfigured) {
            return window.isWebhookConfigured();
        }
        
        // V√©rification locale
        return DEMO_WEBHOOK_URL && 
               DEMO_WEBHOOK_URL !== 'VOTRE_WEBHOOK_DISCORD_ICI' &&
               DEMO_WEBHOOK_URL.includes('discord.com/api/webhooks/');
    }
    
    /**
     * Initialiser le syst√®me de notifications
     */
    initializeNotifications() {
        try {
            if (typeof NotificationsGrouped !== 'undefined') {
                this.notificationsSystem = new NotificationsGrouped(DEMO_WEBHOOK_URL);
                this.isInitialized = true;
                console.log('‚úÖ Syst√®me de notifications initialis√©');
                this.runDemo();
            } else {
                console.error('‚ùå Classe NotificationsGrouped non trouv√©e');
                this.showLoadError();
            }
        } catch (error) {
            console.error('‚ùå Erreur d\'initialisation:', error);
            this.showInitializationError(error);
        }
    }
    
    /**
     * Ex√©cuter la d√©monstration
     */
    runDemo() {
        console.log('üé¨ D√©marrage de la d√©monstration Discord...');
        
        // Attendre un peu avant de commencer
        setTimeout(() => {
            this.sendWelcomeNotification();
        }, 1000);
        
        // Envoyer la notification du nouveau serveur apr√®s 3 secondes
        setTimeout(() => {
            this.sendNewServerNotification();
        }, 3000);
        
        // Envoyer une notification personnalis√©e apr√®s 6 secondes
        setTimeout(() => {
            this.sendCustomNotification();
        }, 6000);
        
        // Afficher les statistiques apr√®s 9 secondes
        setTimeout(() => {
            this.showStatistics();
        }, 9000);
    }
    
    /**
     * Envoyer une notification de bienvenue
     */
    sendWelcomeNotification() {
        if (!this.isInitialized) return;
        
        console.log('üëã Envoi de la notification de bienvenue...');
        
        try {
            const welcomeData = {
                message: 'Bienvenue dans la d√©monstration des notifications Discord !',
                type: 'demo_welcome',
                timestamp: new Date().toISOString()
            };
            
            const notificationId = this.notificationsSystem.addNotification(
                'discord_server_update',
                welcomeData,
                'high'
            );
            
            console.log('‚úÖ Notification de bienvenue envoy√©e, ID:', notificationId);
            
        } catch (error) {
            console.error('‚ùå Erreur notification de bienvenue:', error);
        }
    }
    
    /**
     * Envoyer la notification du nouveau serveur Discord
     */
    sendNewServerNotification() {
        if (!this.isInitialized) return;
        
        console.log('üîÑ Envoi de la notification du nouveau serveur Discord...');
        
        try {
            const notificationId = this.notificationsSystem.sendNewDiscordServerNotification();
            
            console.log('‚úÖ Notification du nouveau serveur envoy√©e, ID:', notificationId);
            console.log('üîó Lien du serveur:', this.demoData.inviteLink);
            
            // Afficher les d√©tails dans la console
            this.logServerDetails();
            
        } catch (error) {
            console.error('‚ùå Erreur notification nouveau serveur:', error);
        }
    }
    
    /**
     * Envoyer une notification personnalis√©e
     */
    sendCustomNotification() {
        if (!this.isInitialized) return;
        
        console.log('üé® Envoi d\'une notification personnalis√©e...');
        
        try {
            const customData = {
                serverName: 'Serveur D√©mo Personnalis√©',
                inviteLink: 'https://discord.gg/demo123',
                description: 'Ceci est une d√©monstration de notification personnalis√©e',
                features: ['Fonctionnalit√© A', 'Fonctionnalit√© B', 'Fonctionnalit√© C'],
                priority: 'high',
                demo: true,
                timestamp: new Date().toISOString()
            };
            
            const notificationId = this.notificationsSystem.sendDiscordServerUpdate(
                customData.serverName,
                customData.inviteLink,
                customData
            );
            
            console.log('‚úÖ Notification personnalis√©e envoy√©e, ID:', notificationId);
            
        } catch (error) {
            console.error('‚ùå Erreur notification personnalis√©e:', error);
        }
    }
    
    /**
     * Afficher les statistiques
     */
    showStatistics() {
        if (!this.isInitialized) return;
        
        console.log('üìä R√©cup√©ration des statistiques...');
        
        try {
            const stats = this.notificationsSystem.getStats();
            
            console.log('üìà Statistiques des notifications:');
            console.log('   ‚Ä¢ Total:', stats.totalNotifications);
            console.log('   ‚Ä¢ Importantes:', stats.importantCount);
            console.log('   ‚Ä¢ Connexions:', stats.connectionCount);
            console.log('   ‚Ä¢ Normales:', stats.normalCount);
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration statistiques:', error);
        }
    }
    
    /**
     * Afficher les d√©tails du serveur dans la console
     */
    logServerDetails() {
        console.log('üè† D√©tails du nouveau serveur Discord:');
        console.log('   ‚Ä¢ Nom:', this.demoData.serverName);
        console.log('   ‚Ä¢ Lien:', this.demoData.inviteLink);
        console.log('   ‚Ä¢ Description:', this.demoData.description);
        console.log('   ‚Ä¢ Fonctionnalit√©s:', this.demoData.features);
        console.log('   ‚Ä¢ Avantages:', this.demoData.benefits);
    }
    
    /**
     * Afficher les instructions de configuration
     */
    showConfigurationInstructions() {
        console.log('‚öôÔ∏è Configuration requise:');
        console.log('1. Remplacez VOTRE_WEBHOOK_DISCORD_ICI par votre URL de webhook Discord');
        console.log('2. Assurez-vous que les fichiers discord-webhook-config.js et notifications-grouped.js sont charg√©s');
        console.log('3. Rechargez la page pour r√©initialiser');
        console.log('');
        console.log('üìñ Voir README_DISCORD_NOTIFICATIONS.md pour plus de d√©tails');
    }
    
    /**
     * Afficher l'erreur de chargement
     */
    showLoadError() {
        console.error('üìö Erreur de chargement:');
        console.error('   ‚Ä¢ Assurez-vous que discord-webhook-config.js est charg√©');
        console.error('   ‚Ä¢ Assurez-vous que notifications-grouped.js est charg√©');
        console.error('   ‚Ä¢ V√©rifiez l\'ordre de chargement des scripts');
    }
    
    /**
     * Afficher l'erreur d'initialisation
     */
    showInitializationError(error) {
        console.error('üîß Erreur d\'initialisation:');
        console.error('   ‚Ä¢ D√©tails:', error.message);
        console.error('   ‚Ä¢ V√©rifiez la configuration du webhook');
        console.error('   ‚Ä¢ V√©rifiez la connectivit√© r√©seau');
    }
    
    /**
     * M√©thode publique pour forcer l'envoi d'une notification
     */
    forceSendNotification() {
        if (!this.isInitialized) {
            console.error('‚ùå Syst√®me non initialis√©');
            return false;
        }
        
        try {
            this.sendNewServerNotification();
            return true;
        } catch (error) {
            console.error('‚ùå Erreur envoi forc√©:', error);
            return false;
        }
    }
    
    /**
     * M√©thode publique pour obtenir le statut
     */
    getStatus() {
        return {
            initialized: this.isInitialized,
            webhookConfigured: this.checkWebhookConfiguration(),
            demoData: this.demoData,
            timestamp: new Date().toISOString()
        };
    }
}

// Initialisation automatique si dans un navigateur
if (typeof window !== 'undefined') {
    // Attendre que la page soit charg√©e
    window.addEventListener('load', function() {
        // Cr√©er l'instance de d√©monstration
        window.discordDemo = new DiscordNotificationDemo();
        
        // Exposer les m√©thodes publiques
        window.testDiscordNotification = () => {
            if (window.discordDemo) {
                return window.discordDemo.forceSendNotification();
            }
            return false;
        };
        
        window.getDiscordDemoStatus = () => {
            if (window.discordDemo) {
                return window.discordDemo.getStatus();
            }
            return null;
        };
        
        console.log('üéØ D√©monstration Discord charg√©e. Utilisez:');
        console.log('   ‚Ä¢ testDiscordNotification() - Tester la notification');
        console.log('   ‚Ä¢ getDiscordDemoStatus() - Obtenir le statut');
        console.log('   ‚Ä¢ window.discordDemo - Acc√®s direct √† l\'instance');
    });
}

// Export pour utilisation en module
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DiscordNotificationDemo;
}

console.log('üìÅ Fichier de d√©monstration Discord charg√©');
console.log('üîó Nouveau serveur: https://discord.gg/5ps8dkfnBk');
